openapi: 3.0.0
info:
  title: User Management API
  description: |
    A comprehensive API for managing users, profiles, and authentication.
    This API follows REST principles and provides secure access to user data.
  version: 2.1.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v2
    description: Production server
  - url: https://staging-api.example.com/v2
    description: Staging server

security:
  - bearerAuth: []

paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      description: |
        Retrieve a paginated list of all users in the system.
        Supports filtering by various criteria.
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return (default 20, max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of users to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          description: Search users by name or email
          required: false
          schema:
            type: string
            minLength: 3
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
              example:
                users:
                  - id: 1
                    name: "John Doe"
                    email: "john@example.com"
                    createdAt: "2023-01-15T10:30:00Z"
                  - id: 2
                    name: "Jane Smith"
                    email: "jane@example.com"
                    createdAt: "2023-01-16T14:20:00Z"
                pagination:
                  limit: 20
                  offset: 0
                  total: 150
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user account with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: "Alice Johnson"
              email: "alice@example.com"
              password: "SecurePass123!"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 3
                name: "Alice Johnson"
                email: "alice@example.com"
                createdAt: "2023-12-01T09:15:00Z"
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: Unique identifier for the user
        schema:
          type: integer
          minimum: 1
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve detailed information about a specific user
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                name: "John Doe"
                email: "john@example.com"
                createdAt: "2023-01-15T10:30:00Z"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users
      summary: Update user
      description: Update an existing user's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              name: "John Updated"
              email: "john.updated@example.com"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users
      summary: Delete user
      description: Permanently delete a user account
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the authentication endpoint

  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - createdAt
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john@example.com"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-01-15T10:30:00Z"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: Full name of the user
          example: "Alice Johnson"
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "alice@example.com"
        password:
          type: string
          description: Password for the user account
          minLength: 8
          maxLength: 128
          example: "SecurePass123!"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
          example: "John Updated"
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.updated@example.com"

    UserList:
      type: object
      required:
        - users
        - pagination
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: List of users
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      required:
        - limit
        - offset
        - total
      properties:
        limit:
          type: integer
          description: Number of items per page
          example: 20
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        total:
          type: integer
          description: Total number of items available
          example: 150

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "USER_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "The requested user could not be found"
        details:
          type: string
          description: Additional error details
          example: "User with ID 999 does not exist in the database"

    ValidationError:
      type: object
      required:
        - error
        - message
        - validationErrors
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "The request contains invalid data"
        validationErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that failed validation
                example: "email"
              message:
                type: string
                description: Validation error message
                example: "Email format is invalid"

tags:
  - name: users
    description: User management operations
    externalDocs:
      description: User API Documentation
      url: https://docs.example.com/users 